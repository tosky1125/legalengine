{"ast":null,"code":"var _jsxFileName = \"/Users/iden/Desktop/Projects/carillon_codestates/client/src/components/Pagination.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  initialPage: PropTypes.number,\n  pageSize: PropTypes.number\n};\nconst defaultProps = {\n  initialPage: 1,\n  pageSize: 10\n};\n\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pager: {}\n    };\n  }\n\n  componentDidMount() {\n    // 데이터 배열이 있을 때, 페이지 셋업\n    if (this.props.items && this.props.items.length) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // 데이터 배열이 변하면 페이지도 리셋\n    if (this.props.items !== prevProps.items) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  setPage(page) {\n    let {\n      items,\n      pageSize\n    } = this.props;\n    let pager = this.state.pager;\n\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    } // specified page를 위한 페이저 객체\n\n\n    pager = this.getPager(items.length, page, pageSize); // 데이터 배열에서 나온 데이터들을 위한 새로운 페이지 만들기\n\n    let pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n    this.setState({\n      pager: pager\n    }); // 부모 컴포넌트에서 페이지바꾸기 함수 불러오기\n\n    this.props.onChangePage(pageOfItems);\n  }\n\n  getPager(totalItems, currentPage, pageSize) {\n    currentPage = currentPage || 1;\n    pageSize = pageSize || 10; // 전체 페이지 계산\n\n    let totalPages = Math.ceil(totalItems / pageSize);\n    let startPage, endPage;\n\n    if (totalPages <= 10) {\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      // 페이지 개수 10보다 많으면 개산하고 엔드 페이지\n      if (currentPage <= 6) {\n        startPage = 1;\n        endPage = 10;\n      } else if (currentPage + 4 >= totalPages) {\n        startPage = totalPages - 9;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 5;\n        endPage = currentPage + 4;\n      }\n    } // 데이터 인덱스 엔드\n\n\n    let startIndex = (currentPage - 1) * pageSize;\n    let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1); // 페이지 배열 생성 -> 페이저에서 반복안되게\n\n    let pages = [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i); //페이저 프로퍼티 반환\n\n    return {\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pageSize: pageSize,\n      totalPages: totalPages,\n      startPage: startPage,\n      endPage: endPage,\n      startIndex: startIndex,\n      endIndex: endIndex,\n      pages: pages\n    };\n  }\n\n  render() {\n    let pager = this.state.pager;\n\n    if (!pager.pages || pager.pages.length <= 1) {\n      // 페이지가 1이면 페이저 디스플레이 안하기\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"pagination\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"li\", {\n      className: pager.currentPage === 1 ? 'disabled' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#page\",\n      onClick: () => this.setPage(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, '<<')), /*#__PURE__*/React.createElement(\"li\", {\n      className: pager.currentPage === 1 ? 'disabled' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#page\",\n      onClick: () => this.setPage(pager.currentPage - 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, '<')), pager.pages.map((page, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      className: pager.currentPage === page ? 'active' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#page\",\n      onClick: () => this.setPage(page),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 15\n      }\n    }, page))), /*#__PURE__*/React.createElement(\"li\", {\n      className: pager.currentPage === pager.totalPages ? 'disabled' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#page\",\n      onClick: () => this.setPage(pager.currentPage + 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, '>')), /*#__PURE__*/React.createElement(\"li\", {\n      className: pager.currentPage === pager.totalPages ? 'disabled' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#page\",\n      onClick: () => this.setPage(pager.totalPages),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, '>>'))));\n  }\n\n}\n\nPagination.propTypes = propTypes;\nPagination.defaultProps = defaultProps;\nexport default Pagination;\n/*\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './Pagination.css';\n\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  initialPage: PropTypes.number,\n  pageSize: PropTypes.number,\n};\nconst defaultProps = {\n  initialPage: 1,\n  pageSize: 6,\n};\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { pager: {} };\n  }\n  componentDidMount() {\n    // 데이터 배열이 있을 때, 페이지 셋업\n    if (this.props.items && this.props.items.length) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n  componentDidUpdate(prevProps) {\n    // 데이터 배열이 변하면 페이지도 리셋\n    if (this.props.items !== prevProps.items) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  setPage(page) {\n    let { items, pageSize } = this.props;\n    let pager = this.state.pager;\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    }\n    // specified page를 위한 페이저 객체\n    pager = this.getPager(items.length, page, pageSize);\n    // 데이터 배열에서 나온 데이터들을 위한 새로운 페이지 만들기\n    let pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n    this.setState({ pager: pager });\n    // 부모 컴포넌트에서 페이지바꾸기 함수 불러오기\n    this.props.onChangePage(pageOfItems);\n  }\n  getPager(totalItems, currentPage, pageSize) {\n    let pageDefaultNum = 10;\n    currentPage = currentPage || 1;\n    pageSize = pageSize || pageDefaultNum;\n    // 전체 페이지 계산\n    let totalPages = Math.ceil(totalItems / pageSize);\n    let startPage, endPage;\n    if (totalPages <= pageDefaultNum) {\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      // 페이지 개수 10보다 많으면 개산하고 엔드 페이지\n      if (currentPage <= pageDefaultNum) {\n        startPage = 1;\n        endPage = pageDefaultNum;\n      } else if (currentPage + 4 >= totalPages) {\n        startPage = totalPages - 9;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 5;\n        endPage = currentPage + 4;\n      }\n    }\n    // 데이터 인덱스 엔드\n    let startIndex = (currentPage - 1) * pageSize;\n    let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n    // 페이지 배열 생성 -> 페이저에서 반복안되게\n    let pages = [...Array(endPage + 1 - startPage).keys()].map(\n      (i) => startPage + i\n    );\n    //페이저 프로퍼티 반환\n    return {\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pageSize: pageSize,\n      totalPages: totalPages,\n      startPage: startPage,\n      endPage: endPage,\n      startIndex: startIndex,\n      endIndex: endIndex,\n      pages: pages,\n    };\n  }\n\n  render() {\n    let pager = this.state.pager;\n    if (!pager.pages || pager.pages.length <= 1) {\n      // 페이지가 1이면 페이저 디스플레이 안하기\n      return null;\n    }\n    return (\n      <div>\n        <ul className='pagination-container'>\n          <span className='pagination-pager-first'>\n            <span className={pager.currentPage === 1 ? 'disabled' : ''}>\n              <a href='#page' onClick={() => this.setPage(1)}>\n                {'<<'}\n              </a>\n            </span>\n          </span>\n          <span className='pagination-pager-previous'>\n            <span className={pager.currentPage === 1 ? 'disabled' : ''}>\n              <a\n                href='#page'\n                onClick={() => this.setPage(pager.currentPage - 1)}\n              >\n                {'<'}\n              </a>\n            </span>\n          </span>\n          {pager.pages.map((page, pageIndex) => (\n            <span key={pageIndex} className='pagination-pager-numbers'>\n              <span className={pager.currentPage === page ? 'active' : ''}>\n                <a href='#page' onClick={() => this.setPage(page)}>\n                  {page}\n                </a>\n              </span>\n            </span>\n          ))}\n          <span className='pagination-pager-next'>\n            <span\n              className={\n                pager.currentPage === pager.totalPages ? 'disabled' : ''\n              }\n            >\n              <a\n                href='#page'\n                onClick={() => this.setPage(pager.currentPage + 1)}\n              >\n                {'>'}\n              </a>\n            </span>\n          </span>\n          <span className='pagination-pager-end'>\n            <span\n              className={\n                pager.currentPage === pager.totalPages ? 'disabled' : ''\n              }\n            >\n              <a href='#page' onClick={() => this.setPage(pager.totalPages)}>\n                {'>>'}\n              </a>\n            </span>\n          </span>\n        </ul>\n      </div>\n    );\n  }\n}\nPagination.propTypes = propTypes;\nPagination.defaultProps = defaultProps;\nexport default Pagination; */","map":{"version":3,"sources":["/Users/iden/Desktop/Projects/carillon_codestates/client/src/components/Pagination.js"],"names":["React","PropTypes","propTypes","items","array","isRequired","onChangePage","func","initialPage","number","pageSize","defaultProps","Pagination","Component","constructor","props","state","pager","componentDidMount","length","setPage","componentDidUpdate","prevProps","page","totalPages","getPager","pageOfItems","slice","startIndex","endIndex","setState","totalItems","currentPage","Math","ceil","startPage","endPage","min","pages","Array","keys","map","i","render","index"],"mappings":"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":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  initialPage: PropTypes.number,\n  pageSize: PropTypes.number,\n};\n\nconst defaultProps = {\n  initialPage: 1,\n  pageSize: 10,\n};\n\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { pager: {} };\n  }\n\n  componentDidMount() {\n    // 데이터 배열이 있을 때, 페이지 셋업\n    if (this.props.items && this.props.items.length) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // 데이터 배열이 변하면 페이지도 리셋\n    if (this.props.items !== prevProps.items) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  setPage(page) {\n    let { items, pageSize } = this.props;\n    let pager = this.state.pager;\n\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    }\n\n    // specified page를 위한 페이저 객체\n    pager = this.getPager(items.length, page, pageSize);\n\n    // 데이터 배열에서 나온 데이터들을 위한 새로운 페이지 만들기\n    let pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n\n    this.setState({ pager: pager });\n\n    // 부모 컴포넌트에서 페이지바꾸기 함수 불러오기\n    this.props.onChangePage(pageOfItems);\n  }\n\n  getPager(totalItems, currentPage, pageSize) {\n    currentPage = currentPage || 1;\n    pageSize = pageSize || 10;\n\n    // 전체 페이지 계산\n    let totalPages = Math.ceil(totalItems / pageSize);\n\n    let startPage, endPage;\n    if (totalPages <= 10) {\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      // 페이지 개수 10보다 많으면 개산하고 엔드 페이지\n      if (currentPage <= 6) {\n        startPage = 1;\n        endPage = 10;\n      } else if (currentPage + 4 >= totalPages) {\n        startPage = totalPages - 9;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 5;\n        endPage = currentPage + 4;\n      }\n    }\n\n    // 데이터 인덱스 엔드\n    let startIndex = (currentPage - 1) * pageSize;\n    let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n    // 페이지 배열 생성 -> 페이저에서 반복안되게\n    let pages = [...Array(endPage + 1 - startPage).keys()].map(\n      (i) => startPage + i\n    );\n\n    //페이저 프로퍼티 반환\n    return {\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pageSize: pageSize,\n      totalPages: totalPages,\n      startPage: startPage,\n      endPage: endPage,\n      startIndex: startIndex,\n      endIndex: endIndex,\n      pages: pages,\n    };\n  }\n\n  render() {\n    let pager = this.state.pager;\n\n    if (!pager.pages || pager.pages.length <= 1) {\n      // 페이지가 1이면 페이저 디스플레이 안하기\n      return null;\n    }\n\n    return (\n      <>\n        <ul className='pagination'>\n          <link\n            rel='stylesheet'\n            href='https://netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css'\n          />\n          <li className={pager.currentPage === 1 ? 'disabled' : ''}>\n            <a href='#page' onClick={() => this.setPage(1)}>\n              {'<<'}\n            </a>\n          </li>\n          <li className={pager.currentPage === 1 ? 'disabled' : ''}>\n            <a href='#page' onClick={() => this.setPage(pager.currentPage - 1)}>\n              {'<'}\n            </a>\n          </li>\n          {pager.pages.map((page, index) => (\n            <li\n              key={index}\n              className={pager.currentPage === page ? 'active' : ''}\n            >\n              <a href='#page' onClick={() => this.setPage(page)}>\n                {page}\n              </a>\n            </li>\n          ))}\n          <li\n            className={pager.currentPage === pager.totalPages ? 'disabled' : ''}\n          >\n            <a href='#page' onClick={() => this.setPage(pager.currentPage + 1)}>\n              {'>'}\n            </a>\n          </li>\n          <li\n            className={pager.currentPage === pager.totalPages ? 'disabled' : ''}\n          >\n            <a href='#page' onClick={() => this.setPage(pager.totalPages)}>\n              {'>>'}\n            </a>\n          </li>\n        </ul>\n      </>\n    );\n  }\n}\n\nPagination.propTypes = propTypes;\nPagination.defaultProps = defaultProps;\nexport default Pagination;\n\n/*\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './Pagination.css';\n\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  initialPage: PropTypes.number,\n  pageSize: PropTypes.number,\n};\nconst defaultProps = {\n  initialPage: 1,\n  pageSize: 6,\n};\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { pager: {} };\n  }\n  componentDidMount() {\n    // 데이터 배열이 있을 때, 페이지 셋업\n    if (this.props.items && this.props.items.length) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n  componentDidUpdate(prevProps) {\n    // 데이터 배열이 변하면 페이지도 리셋\n    if (this.props.items !== prevProps.items) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  setPage(page) {\n    let { items, pageSize } = this.props;\n    let pager = this.state.pager;\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    }\n    // specified page를 위한 페이저 객체\n    pager = this.getPager(items.length, page, pageSize);\n    // 데이터 배열에서 나온 데이터들을 위한 새로운 페이지 만들기\n    let pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n    this.setState({ pager: pager });\n    // 부모 컴포넌트에서 페이지바꾸기 함수 불러오기\n    this.props.onChangePage(pageOfItems);\n  }\n  getPager(totalItems, currentPage, pageSize) {\n    let pageDefaultNum = 10;\n    currentPage = currentPage || 1;\n    pageSize = pageSize || pageDefaultNum;\n    // 전체 페이지 계산\n    let totalPages = Math.ceil(totalItems / pageSize);\n    let startPage, endPage;\n    if (totalPages <= pageDefaultNum) {\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      // 페이지 개수 10보다 많으면 개산하고 엔드 페이지\n      if (currentPage <= pageDefaultNum) {\n        startPage = 1;\n        endPage = pageDefaultNum;\n      } else if (currentPage + 4 >= totalPages) {\n        startPage = totalPages - 9;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 5;\n        endPage = currentPage + 4;\n      }\n    }\n    // 데이터 인덱스 엔드\n    let startIndex = (currentPage - 1) * pageSize;\n    let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n    // 페이지 배열 생성 -> 페이저에서 반복안되게\n    let pages = [...Array(endPage + 1 - startPage).keys()].map(\n      (i) => startPage + i\n    );\n    //페이저 프로퍼티 반환\n    return {\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pageSize: pageSize,\n      totalPages: totalPages,\n      startPage: startPage,\n      endPage: endPage,\n      startIndex: startIndex,\n      endIndex: endIndex,\n      pages: pages,\n    };\n  }\n\n  render() {\n    let pager = this.state.pager;\n    if (!pager.pages || pager.pages.length <= 1) {\n      // 페이지가 1이면 페이저 디스플레이 안하기\n      return null;\n    }\n    return (\n      <div>\n        <ul className='pagination-container'>\n          <span className='pagination-pager-first'>\n            <span className={pager.currentPage === 1 ? 'disabled' : ''}>\n              <a href='#page' onClick={() => this.setPage(1)}>\n                {'<<'}\n              </a>\n            </span>\n          </span>\n          <span className='pagination-pager-previous'>\n            <span className={pager.currentPage === 1 ? 'disabled' : ''}>\n              <a\n                href='#page'\n                onClick={() => this.setPage(pager.currentPage - 1)}\n              >\n                {'<'}\n              </a>\n            </span>\n          </span>\n          {pager.pages.map((page, pageIndex) => (\n            <span key={pageIndex} className='pagination-pager-numbers'>\n              <span className={pager.currentPage === page ? 'active' : ''}>\n                <a href='#page' onClick={() => this.setPage(page)}>\n                  {page}\n                </a>\n              </span>\n            </span>\n          ))}\n          <span className='pagination-pager-next'>\n            <span\n              className={\n                pager.currentPage === pager.totalPages ? 'disabled' : ''\n              }\n            >\n              <a\n                href='#page'\n                onClick={() => this.setPage(pager.currentPage + 1)}\n              >\n                {'>'}\n              </a>\n            </span>\n          </span>\n          <span className='pagination-pager-end'>\n            <span\n              className={\n                pager.currentPage === pager.totalPages ? 'disabled' : ''\n              }\n            >\n              <a href='#page' onClick={() => this.setPage(pager.totalPages)}>\n                {'>>'}\n              </a>\n            </span>\n          </span>\n        </ul>\n      </div>\n    );\n  }\n}\nPagination.propTypes = propTypes;\nPagination.defaultProps = defaultProps;\nexport default Pagination; */"]},"metadata":{},"sourceType":"module"}